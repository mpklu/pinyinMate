/**
 * Export service using jsPDF
 * Generates PDF flashcards and study materials from Chinese learning content
 */

import jsPDF from 'jspdf';
import type {
  PDFExportRequest,
  PDFExportResponse,
  AnkiExportResponse,
  QuizletExportRequest,
  QuizletExportResponse,
} from '../types/library';
import type {
  FlashcardDeck,
} from '../types/flashcard';
import type {
  Quiz,
} from '../types/quiz';
import type {
  TextAnnotation,
} from '../types/annotation';

/**
 * Validates PDF export request
 */
export const validatePDFRequest = (request: PDFExportRequest): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];

  if (!request.contentType) {
    errors.push('Content type is required');
  }

  if (!request.contentId) {
    errors.push('Content ID is required');
  }

  if (request.options?.fontSize && (request.options.fontSize < 8 || request.options.fontSize > 24)) {
    errors.push('Font size must be between 8 and 24');
  }

  if (request.options?.margin && (request.options.margin < 0 || request.options.margin > 50)) {
    errors.push('Margin must be between 0 and 50mm');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
};

/**
 * Creates a new jsPDF instance with specified options
 */
const createPDFInstance = (pageSize: 'A4' | 'Letter' | 'A5' = 'A4'): jsPDF => {
  const orientation = 'portrait';
  const unit = 'mm';
  
  return new jsPDF({
    orientation,
    unit,
    format: pageSize.toLowerCase(),
  });
};

/**
 * Adds header to PDF page
 */
const addPDFHeader = (pdf: jsPDF, title: string, pageNumber: number = 1): void => {
  const pageWidth = pdf.internal.pageSize.getWidth();
  
  // Title
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text(title, pageWidth / 2, 20, { align: 'center' });
  
  // Page number
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Page ${pageNumber}`, pageWidth - 20, 20, { align: 'right' });
  
  // Separator line
  pdf.setLineWidth(0.5);
  pdf.line(20, 25, pageWidth - 20, 25);
};

/**
 * Adds footer to PDF page
 */
const addPDFFooter = (pdf: jsPDF): void => {
  const pageHeight = pdf.internal.pageSize.getHeight();
  const pageWidth = pdf.internal.pageSize.getWidth();
  
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Generated by Chinese Learning App', pageWidth / 2, pageHeight - 10, { align: 'center' });
};

/**
 * Exports flashcard deck as PDF
 */
const exportFlashcardsToPDF = (deck: FlashcardDeck, options: PDFExportRequest['options']): PDFExportResponse => {
  try {
    const pdf = createPDFInstance(options.pageSize);
    const fontSize = options.fontSize || 12;
    const margin = options.margin || 20;
    
    let pageNumber = 1;
    const yPosition = 40;
    const pageHeight = pdf.internal.pageSize.getHeight();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const cardHeight = 60;
    const cardsPerPage = Math.floor((pageHeight - 60) / cardHeight);

    // Add title page
    addPDFHeader(pdf, deck.name, pageNumber);
    
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Flashcard Deck', pageWidth / 2, 50, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    if (deck.metadata.description) {
      const lines = pdf.splitTextToSize(deck.metadata.description, pageWidth - 2 * margin);
      pdf.text(lines, margin, 70);
    }
    
    pdf.text(`Cards: ${deck.cards.length}`, margin, 90);
    pdf.text(`Difficulty: ${deck.metadata.difficulty || 'N/A'}`, margin, 100);
    pdf.text(`Created: ${deck.createdAt.toLocaleDateString()}`, margin, 110);
    
    addPDFFooter(pdf);

    // Add cards
    let cardIndex = 0;
    for (const card of deck.cards) {
      // Check if we need a new page
      if (cardIndex > 0 && cardIndex % cardsPerPage === 0) {
        pdf.addPage();
        pageNumber++;
        addPDFHeader(pdf, `${deck.name} - Cards`, pageNumber);
      }

      // Card box
      const cardY = yPosition + (cardIndex % cardsPerPage) * cardHeight;
      pdf.setDrawColor(200, 200, 200);
      pdf.rect(margin, cardY, pageWidth - 2 * margin, cardHeight - 5);

      // Front (Chinese)
      pdf.setFontSize(fontSize + 2);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Front:', margin + 5, cardY + 15);
      
      pdf.setFontSize(fontSize + 4);
      pdf.text(card.front, margin + 30, cardY + 15);

      // Back (Pinyin and definition)
      pdf.setFontSize(fontSize);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Back:', margin + 5, cardY + 30);
      
      if (card.back.pinyin) {
        pdf.text(`Pinyin: ${card.back.pinyin}`, margin + 30, cardY + 30);
      }
      
      if (card.back.definition && options.includeAnswers !== false) {
        const defLines = pdf.splitTextToSize(`Definition: ${card.back.definition}`, pageWidth - margin - 35);
        pdf.text(defLines, margin + 30, cardY + 40);
      }

      cardIndex++;
    }

    addPDFFooter(pdf);

    // Generate blob
    const pdfBlob = pdf.output('blob');
    const filename = `${deck.name.replace(/[^a-zA-Z0-9]/g, '_')}_flashcards.pdf`;

    return {
      success: true,
      data: {
        filename,
        blob: pdfBlob,
        size: pdfBlob.size,
        pageCount: pdf.getNumberOfPages(),
      },
    };

  } catch (error) {
    console.error('PDF export failed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown PDF export error',
    };
  }
};

/**
 * Exports quiz as PDF
 */
const exportQuizToPDF = (quiz: Quiz, options: PDFExportRequest['options']): PDFExportResponse => {
  try {
    const pdf = createPDFInstance(options.pageSize);
    const fontSize = options.fontSize || 12;
    const margin = options.margin || 20;
    
    let pageNumber = 1;
    let yPosition = 40;
    const pageHeight = pdf.internal.pageSize.getHeight();
    const pageWidth = pdf.internal.pageSize.getWidth();

    // Add title page
    addPDFHeader(pdf, 'Chinese Learning Quiz', pageNumber);
    
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Quiz', pageWidth / 2, 50, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Questions: ${quiz.questions.length}`, margin, 70);
    pdf.text(`Difficulty: ${quiz.metadata.difficulty || 'N/A'}`, margin, 80);
    pdf.text(`Estimated Time: ${quiz.metadata.estimatedTime || 'N/A'} minutes`, margin, 90);
    pdf.text(`Created: ${quiz.createdAt.toLocaleDateString()}`, margin, 100);
    
    addPDFFooter(pdf);

    // Add questions
    pdf.addPage();
    pageNumber++;
    yPosition = 40;
    addPDFHeader(pdf, 'Quiz Questions', pageNumber);

    quiz.questions.forEach((question, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight - 80) {
        pdf.addPage();
        pageNumber++;
        addPDFHeader(pdf, 'Quiz Questions (continued)', pageNumber);
        yPosition = 40;
      }

      // Question number and prompt
      pdf.setFontSize(fontSize + 1);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${index + 1}.`, margin, yPosition);
      
      pdf.setFontSize(fontSize);
      pdf.setFont('helvetica', 'normal');
      const promptLines = pdf.splitTextToSize(question.prompt, pageWidth - margin - 20);
      pdf.text(promptLines, margin + 10, yPosition);
      
      yPosition += promptLines.length * 6 + 5;

      // Options for multiple choice
      if (question.type === 'multiple-choice' && question.options) {
        question.options.forEach((option, optIndex) => {
          const optionLabel = String.fromCharCode(65 + optIndex); // A, B, C, D
          pdf.text(`${optionLabel}) ${option}`, margin + 15, yPosition);
          yPosition += 8;
        });
      }

      // Answer (if requested)
      if (options.includeAnswers) {
        pdf.setFontSize(fontSize - 1);
        pdf.setFont('helvetica', 'italic');
        const answer = Array.isArray(question.correctAnswer) 
          ? question.correctAnswer.join(', ')
          : question.correctAnswer;
        pdf.text(`Answer: ${answer}`, margin + 15, yPosition);
        yPosition += 10;
        
        if (question.explanation) {
          const explLines = pdf.splitTextToSize(`Explanation: ${question.explanation}`, pageWidth - margin - 20);
          pdf.text(explLines, margin + 15, yPosition);
          yPosition += explLines.length * 5;
        }
      }

      yPosition += 10; // Space between questions
    });

    addPDFFooter(pdf);

    // Generate blob
    const pdfBlob = pdf.output('blob');
    const filename = `chinese_quiz_${Date.now()}.pdf`;

    return {
      success: true,
      data: {
        filename,
        blob: pdfBlob,
        size: pdfBlob.size,
        pageCount: pdf.getNumberOfPages(),
      },
    };

  } catch (error) {
    console.error('Quiz PDF export failed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown PDF export error',
    };
  }
};

/**
 * Exports text annotation as PDF
 */
const exportAnnotationToPDF = (annotation: TextAnnotation, options: PDFExportRequest['options']): PDFExportResponse => {
  try {
    const pdf = createPDFInstance(options.pageSize);
    const fontSize = options.fontSize || 12;
    const margin = options.margin || 20;
    
    let pageNumber = 1;
    let yPosition = 40;
    const pageWidth = pdf.internal.pageSize.getWidth();

    // Add title page
    addPDFHeader(pdf, 'Chinese Text Annotation', pageNumber);
    
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Text Analysis', pageWidth / 2, 50, { align: 'center' });
    
    // Original text
    pdf.setFontSize(fontSize + 2);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Original Text:', margin, 70);
    
    pdf.setFontSize(fontSize);
    pdf.setFont('helvetica', 'normal');
    const textLines = pdf.splitTextToSize(annotation.originalText, pageWidth - 2 * margin);
    pdf.text(textLines, margin, 85);
    
    yPosition = 85 + textLines.length * 6 + 20;

    // Segments
    pdf.setFontSize(fontSize + 1);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Word Analysis:', margin, yPosition);
    yPosition += 15;

    annotation.segments.forEach((segment, index) => {
      // Check if we need a new page
      if (yPosition > 250) {
        pdf.addPage();
        pageNumber++;
        yPosition = 40;
        addPDFHeader(pdf, 'Text Analysis (continued)', pageNumber);
      }

      pdf.setFontSize(fontSize);
      pdf.setFont('helvetica', 'bold');
      pdf.text(`${index + 1}. ${segment.text}`, margin, yPosition);
      
      pdf.setFont('helvetica', 'normal');
      if (segment.pinyin || segment.toneMarks) {
        pdf.text(`Pinyin: ${segment.toneMarks || segment.pinyin}`, margin + 60, yPosition);
      }
      
      yPosition += 8;
      
      if (segment.definition) {
        const defLines = pdf.splitTextToSize(`Definition: ${segment.definition}`, pageWidth - margin - 10);
        pdf.text(defLines, margin + 10, yPosition);
        yPosition += defLines.length * 5 + 5;
      } else {
        yPosition += 5;
      }
    });

    addPDFFooter(pdf);

    // Generate blob
    const pdfBlob = pdf.output('blob');
    const filename = `chinese_annotation_${Date.now()}.pdf`;

    return {
      success: true,
      data: {
        filename,
        blob: pdfBlob,
        size: pdfBlob.size,
        pageCount: pdf.getNumberOfPages(),
      },
    };

  } catch (error) {
    console.error('Annotation PDF export failed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown PDF export error',
    };
  }
};

/**
 * Main PDF export function
 */
export const exportToPDF = async (
  request: PDFExportRequest,
  content: FlashcardDeck | Quiz | TextAnnotation
): Promise<PDFExportResponse> => {
  try {
    // Validate request
    const validation = validatePDFRequest(request);
    if (!validation.isValid) {
      return {
        success: false,
        error: validation.errors.join(', '),
      };
    }

    // Export based on content type
    switch (request.contentType) {
      case 'flashcards':
      case 'deck':
        return exportFlashcardsToPDF(content as FlashcardDeck, request.options);
      
      case 'quiz':
        return exportQuizToPDF(content as Quiz, request.options);
      
      case 'annotation':
        return exportAnnotationToPDF(content as TextAnnotation, request.options);
      
      default:
        return {
          success: false,
          error: `Unsupported content type: ${request.contentType}`,
        };
    }

  } catch (error) {
    console.error('PDF export failed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown PDF export error',
    };
  }
};

/**
 * Exports flashcards to Anki format (placeholder)
 */
export const exportToAnki = async (): Promise<AnkiExportResponse> => {
  // Placeholder for Anki export functionality
  // Would generate .apkg file format for Anki import
  return {
    success: false,
    error: 'Anki export not implemented yet',
  };
};

/**
 * Exports flashcards to Quizlet format (CSV)
 */
export const exportToQuizlet = async (
  request: QuizletExportRequest,
  deck: FlashcardDeck
): Promise<QuizletExportResponse> => {
  try {
    const delimiter = request.options.delimiter || '\t';
    const includeDefinitions = request.options.includeDefinitions !== false;
    const includeExamples = request.options.includeExamples !== false;
    
    // Create CSV header
    let csvContent = `Front${delimiter}Back\n`;
    
    // Add cards
    deck.cards.forEach(card => {
      let front = card.front;
      let back = card.back.pinyin || '';
      
      if (includeDefinitions && card.back.definition) {
        back += back ? ` - ${card.back.definition}` : card.back.definition;
      }
      
      if (includeExamples && card.back.example) {
        back += back ? ` (${card.back.example})` : card.back.example;
      }
      
      // Escape delimiter characters
      front = front.replace(new RegExp(delimiter, 'g'), ` `);
      back = back.replace(new RegExp(delimiter, 'g'), ` `);
      
      csvContent += `${front}${delimiter}${back}\n`;
    });
    
    // Create filename
    const filename = `${deck.name.replace(/[^a-zA-Z0-9]/g, '_')}_quizlet.csv`;
    
    return {
      success: true,
      data: {
        filename,
        csvContent,
        cardCount: deck.cards.length,
      },
    };
    
  } catch (error) {
    console.error('Quizlet export failed:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown Quizlet export error',
    };
  }
};

/**
 * Service interface for export functionality
 */
export const exportService = {
  exportToPDF,
  exportToAnki,
  exportToQuizlet,
  validate: validatePDFRequest,
};

export default exportService;